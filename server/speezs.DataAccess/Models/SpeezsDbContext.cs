// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace speezs.DataAccess.Models;

public partial class SpeezsDbContext : DbContext
{
	public SpeezsDbContext() : base()
	{
		
	}

	public SpeezsDbContext(DbContextOptions<SpeezsDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<CollectionLook> CollectionLooks { get; set; }

    public virtual DbSet<FavoriteCollection> FavoriteCollections { get; set; }

    public virtual DbSet<Look> Looks { get; set; }

    public virtual DbSet<LookProduct> LookProducts { get; set; }

    public virtual DbSet<MakeupProduct> MakeupProducts { get; set; }

    public virtual DbSet<Review> Reviews { get; set; }

    public virtual DbSet<SubscriptionTier> SubscriptionTiers { get; set; }

    public virtual DbSet<Transfer> Transfers { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserPreference> UserPreferences { get; set; }

    public virtual DbSet<UserSubscription> UserSubscriptions { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<CollectionLook>(entity =>
        {
            entity.HasKey(e => e.CollectionLookId).HasName("PK__Collecti__ED9B7B748C6AF668");

            entity.Property(e => e.CollectionLookId).HasColumnName("collection_look_id");
            entity.Property(e => e.CollectionId).HasColumnName("collection_id");
            entity.Property(e => e.DateCreated)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DateDeleted).HasColumnType("datetime");
            entity.Property(e => e.DateModified).HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.LookId).HasColumnName("look_id");
            entity.Property(e => e.Notes).HasColumnName("notes");

            entity.HasOne(d => d.Collection).WithMany(p => p.CollectionLooks)
                .HasForeignKey(d => d.CollectionId)
                .HasConstraintName("FK__Collectio__colle__75A278F5");

            entity.HasOne(d => d.Look).WithMany(p => p.CollectionLooks)
                .HasForeignKey(d => d.LookId)
                .HasConstraintName("FK__Collectio__look___76969D2E");
        });

        modelBuilder.Entity<FavoriteCollection>(entity =>
        {
            entity.HasKey(e => e.CollectionId).HasName("PK__Favorite__53D3A5CAE577CAB2");

            entity.Property(e => e.CollectionId).HasColumnName("collection_id");
            entity.Property(e => e.DateCreated)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DateDeleted).HasColumnType("datetime");
            entity.Property(e => e.DateModified).HasColumnType("datetime");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsPrivate)
                .HasDefaultValue(false)
                .HasColumnName("is_private");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .HasColumnName("name");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.User).WithMany(p => p.FavoriteCollections)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__FavoriteC__user___6FE99F9F");
        });

        modelBuilder.Entity<Look>(entity =>
        {
            entity.HasKey(e => e.LookId).HasName("PK__Looks__CE13522CE78C7B80");

            entity.Property(e => e.LookId).HasColumnName("look_id");
            entity.Property(e => e.AvgRating)
                .HasColumnType("decimal(3, 2)")
                .HasColumnName("avg_rating");
            entity.Property(e => e.Category)
                .HasMaxLength(50)
                .HasColumnName("category");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DateCreated)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DateDeleted).HasColumnType("datetime");
            entity.Property(e => e.DateModified).HasColumnType("datetime");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsPublic)
                .HasDefaultValue(true)
                .HasColumnName("is_public");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("name");
            entity.Property(e => e.ThumbnailUrl)
                .HasMaxLength(255)
                .HasColumnName("thumbnail_url");
            entity.Property(e => e.TotalTransfers)
                .HasDefaultValue(0)
                .HasColumnName("total_transfers");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.Looks)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("FK__Looks__created_b__3D5E1FD2");
        });

        modelBuilder.Entity<LookProduct>(entity =>
        {
            entity.HasKey(e => e.LookProductId).HasName("PK__LookProd__8293FB24558B2F45");

            entity.Property(e => e.LookProductId).HasColumnName("look_product_id");
            entity.Property(e => e.ApplicationArea)
                .HasMaxLength(50)
                .HasColumnName("application_area");
            entity.Property(e => e.ApplicationOrder).HasColumnName("application_order");
            entity.Property(e => e.DateCreated)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DateDeleted).HasColumnType("datetime");
            entity.Property(e => e.DateModified).HasColumnType("datetime");
            entity.Property(e => e.Intensity)
                .HasColumnType("decimal(3, 2)")
                .HasColumnName("intensity");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.LookId).HasColumnName("look_id");
            entity.Property(e => e.Notes).HasColumnName("notes");
            entity.Property(e => e.ProductId).HasColumnName("product_id");

            entity.HasOne(d => d.Look).WithMany(p => p.LookProducts)
                .HasForeignKey(d => d.LookId)
                .HasConstraintName("FK__LookProdu__look___48CFD27E");

            entity.HasOne(d => d.Product).WithMany(p => p.LookProducts)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK__LookProdu__produ__49C3F6B7");
        });

        modelBuilder.Entity<MakeupProduct>(entity =>
        {
            entity.HasKey(e => e.ProductId).HasName("PK__MakeupPr__47027DF5161B9EC4");

            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.Brand)
                .HasMaxLength(100)
                .HasColumnName("brand");
            entity.Property(e => e.Category)
                .HasMaxLength(50)
                .HasColumnName("category");
            entity.Property(e => e.ColorCode)
                .HasMaxLength(7)
                .HasColumnName("color_code");
            entity.Property(e => e.DateCreated)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DateDeleted).HasColumnType("datetime");
            entity.Property(e => e.DateModified).HasColumnType("datetime");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.ImageUrl)
                .HasMaxLength(255)
                .HasColumnName("image_url");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsVerified)
                .HasDefaultValue(false)
                .HasColumnName("is_verified");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Review>(entity =>
        {
            entity.HasKey(e => e.ReviewId).HasName("PK__Reviews__60883D903AACA979");

            entity.Property(e => e.ReviewId).HasColumnName("review_id");
            entity.Property(e => e.Comment).HasColumnName("comment");
            entity.Property(e => e.DateCreated)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DateDeleted).HasColumnType("datetime");
            entity.Property(e => e.DateModified).HasColumnType("datetime");
            entity.Property(e => e.HelpfulVotes)
                .HasDefaultValue(0)
                .HasColumnName("helpful_votes");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.LookId).HasColumnName("look_id");
            entity.Property(e => e.Rating).HasColumnName("rating");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.Look).WithMany(p => p.Reviews)
                .HasForeignKey(d => d.LookId)
                .HasConstraintName("FK__Reviews__look_id__5441852A");

            entity.HasOne(d => d.User).WithMany(p => p.Reviews)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__Reviews__user_id__5535A963");
        });

        modelBuilder.Entity<SubscriptionTier>(entity =>
        {
            entity.HasKey(e => e.TierId).HasName("PK__Subscrip__9D52AF9C8EB17BBC");

            entity.Property(e => e.TierId).HasColumnName("tier_id");
            entity.Property(e => e.AllowsCommercialUse)
                .HasDefaultValue(false)
                .HasColumnName("allows_commercial_use");
            entity.Property(e => e.DateCreated)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DateDeleted).HasColumnType("datetime");
            entity.Property(e => e.DateModified).HasColumnType("datetime");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.DurationDays).HasColumnName("duration_days");
            entity.Property(e => e.IsActive)
                .HasDefaultValue(true)
                .HasColumnName("is_active");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.MaxCollections).HasColumnName("max_collections");
            entity.Property(e => e.MaxTransfers).HasColumnName("max_transfers");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("name");
            entity.Property(e => e.Price)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("price");
            entity.Property(e => e.PriorityProcessing)
                .HasDefaultValue(false)
                .HasColumnName("priority_processing");
        });

        modelBuilder.Entity<Transfer>(entity =>
        {
            entity.HasKey(e => e.TransferId).HasName("PK__Transfer__78E6FD3366FF8C64");

            entity.Property(e => e.TransferId).HasColumnName("transfer_id");
            entity.Property(e => e.AiModelVersion)
                .HasMaxLength(50)
                .HasColumnName("ai_model_version");
            entity.Property(e => e.DateCreated)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DateDeleted).HasColumnType("datetime");
            entity.Property(e => e.DateModified).HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.LookId).HasColumnName("look_id");
            entity.Property(e => e.ProcessingTime)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("processing_time");
            entity.Property(e => e.ResultImageUrl)
                .HasMaxLength(255)
                .HasColumnName("result_image_url");
            entity.Property(e => e.SourceImageUrl)
                .HasMaxLength(255)
                .HasColumnName("source_image_url");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("status");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.Look).WithMany(p => p.Transfers)
                .HasForeignKey(d => d.LookId)
                .HasConstraintName("FK__Transfers__look___4F7CD00D");

            entity.HasOne(d => d.User).WithMany(p => p.Transfers)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__Transfers__user___4E88ABD4");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__Users__B9BE370F2B3DD91D");

            entity.HasIndex(e => e.Email, "UQ__Users__AB6E6164317B8B1C").IsUnique();

            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.DateCreated)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DateDeleted).HasColumnType("datetime");
            entity.Property(e => e.DateModified).HasColumnType("datetime");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("email");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .HasColumnName("first_name");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsPremium)
                .HasDefaultValue(false)
                .HasColumnName("is_premium");
            entity.Property(e => e.LastLogin)
                .HasColumnType("datetime")
                .HasColumnName("last_login");
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .HasColumnName("last_name");
            entity.Property(e => e.PasswordHash)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("password_hash");
            entity.Property(e => e.ProfileImageUrl)
                .HasMaxLength(255)
                .HasColumnName("profile_image_url");
            entity.Property(e => e.RefreshToken).HasMaxLength(64);
            entity.Property(e => e.RefreshTokenExpiry).HasColumnType("datetime");
        });

        modelBuilder.Entity<UserPreference>(entity =>
        {
            entity.HasKey(e => e.PreferenceId).HasName("PK__UserPref__FB41DBCF538B1106");

            entity.HasIndex(e => e.UserId, "UQ__UserPref__B9BE370E47803A8C").IsUnique();

            entity.Property(e => e.PreferenceId).HasColumnName("preference_id");
            entity.Property(e => e.AiEnhancementLevel)
                .HasDefaultValue(5)
                .HasColumnName("ai_enhancement_level");
            entity.Property(e => e.Allergies).HasColumnName("allergies");
            entity.Property(e => e.DateCreated)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DateDeleted).HasColumnType("datetime");
            entity.Property(e => e.DateModified).HasColumnType("datetime");
            entity.Property(e => e.EyeColor)
                .HasMaxLength(50)
                .HasColumnName("eye_color");
            entity.Property(e => e.FaceShape)
                .HasMaxLength(50)
                .HasColumnName("face_shape");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.PreferredBrands).HasColumnName("preferred_brands");
            entity.Property(e => e.SkinTone)
                .HasMaxLength(50)
                .HasColumnName("skin_tone");
            entity.Property(e => e.SkinType)
                .HasMaxLength(50)
                .HasColumnName("skin_type");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.User).WithOne(p => p.UserPreference)
                .HasForeignKey<UserPreference>(d => d.UserId)
                .HasConstraintName("FK__UserPrefe__user___5CD6CB2B");
        });

        modelBuilder.Entity<UserSubscription>(entity =>
        {
            entity.HasKey(e => e.UserSubscriptionId).HasName("PK__UserSubs__14DBAAD975730EDA");

            entity.Property(e => e.UserSubscriptionId).HasColumnName("user_subscription_id");
            entity.Property(e => e.AutoRenew)
                .HasDefaultValue(true)
                .HasColumnName("auto_renew");
            entity.Property(e => e.CancellationDate)
                .HasColumnType("datetime")
                .HasColumnName("cancellation_date");
            entity.Property(e => e.DateCreated)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DateDeleted).HasColumnType("datetime");
            entity.Property(e => e.DateModified).HasColumnType("datetime");
            entity.Property(e => e.EndDate)
                .HasColumnType("datetime")
                .HasColumnName("end_date");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.LastBillingDate)
                .HasColumnType("datetime")
                .HasColumnName("last_billing_date");
            entity.Property(e => e.NextBillingDate)
                .HasColumnType("datetime")
                .HasColumnName("next_billing_date");
            entity.Property(e => e.PaymentMethod)
                .HasMaxLength(50)
                .HasColumnName("payment_method");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("status");
            entity.Property(e => e.TierId).HasColumnName("tier_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.Tier).WithMany(p => p.UserSubscriptions)
                .HasForeignKey(d => d.TierId)
                .HasConstraintName("FK__UserSubsc__tier___6A30C649");

            entity.HasOne(d => d.User).WithMany(p => p.UserSubscriptions)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__UserSubsc__user___693CA210");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}